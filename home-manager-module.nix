{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.services.lumd;
in {
  options.services.lumd = {
    enable = mkEnableOption "Automatic ambient light-based brightness adjustment";

    package = mkOption {
      type = types.package;
      # No default, must be provided by the user or the flake
      description = "The lumd package to use.";
    };

    minBrightness = mkOption {
      type = types.int;
      default = 40;
      description = "Minimum brightness level (0-100).";
    };

    brightnessOffset = mkOption {
      type = types.int;
      default = 40;
      description = "Brightness offset to apply to ambient light readings.";
    };

    sampleIntervalSecs = mkOption {
      type = types.int;
      default = 3;
      description = "Interval in seconds between ambient light samples.";
    };

    transitionSteps = mkOption {
      type = types.int;
      default = 10;
      description = "Number of steps for smooth brightness transitions.";
    };

    stepDelayMs = mkOption {
      type = types.int;
      default = 10;
      description = "Delay in milliseconds between transition steps.";
    };

    brightnessThreshold = mkOption {
      type = types.int;
      default = 8;
      description = "Threshold for brightness changes to trigger a transition.";
    };

    manualAdjustmentAmount = mkOption {
      type = types.int;
      default = 8;
      description = "Amount to adjust brightness when using manual controls.";
    };
  };

  config = mkIf cfg.enable {
    home.packages = [ cfg.package ];

    # Create configuration file and directory
    home.file.".config/lumd/.keep".text = "";

    # Create configuration file
    xdg.configFile."lumd/config.toml".text = ''
      # Lumd configuration - Generated by Home Manager
      
      # Backlight settings
      min_brightness = ${toString cfg.minBrightness}
      brightness_offset = ${toString cfg.brightnessOffset}
      
      # Sampling settings
      sample_interval_secs = ${toString cfg.sampleIntervalSecs}
      transition_steps = ${toString cfg.transitionSteps}
      step_delay_ms = ${toString cfg.stepDelayMs}
      
      # Interpolation threshold
      brightness_threshold = ${toString cfg.brightnessThreshold}
      
      # Adjustment amount for manual controls
      manual_adjustment_amount = ${toString cfg.manualAdjustmentAmount}
    '';

    # Enable the systemd user service
    systemd.user.services.lumd = {
      Unit = {
        Description = "Automatic ambient light-based brightness adjustment";
        After = [ "graphical-session.target" ];
        PartOf = [ "graphical-session.target" ];
      };

      Service = {
        ExecStart = "${cfg.package}/bin/lumd";
        Restart = "on-failure";
        RestartSec = 5;
        
        # Environment variables
        Environment = [
          "XDG_CONFIG_HOME=%h/.config"
          "XDG_RUNTIME_DIR=%t"
        ];
        
        # Logging
        StandardOutput = "journal";
        StandardError = "journal";
        SyslogIdentifier = "lumd";
        
        # Security settings
        PrivateTmp = true;
        NoNewPrivileges = true;
        ProtectSystem = "strict";
        ProtectHome = "read-write";
        ReadWritePaths = "%h/.config/lumd";
        RuntimeDirectory = "lumd";
        RuntimeDirectoryMode = "0755";
        # Use ReadWritePaths instead of ConfigurationDirectory to avoid permission conflicts
        # ConfigurationDirectory = "lumd";
        # ConfigurationDirectoryMode = "0700";
        ProtectControlGroups = true;
        ProtectKernelModules = true;
        RestrictRealtime = true;
        RestrictSUIDSGID = true;
        MemoryDenyWriteExecute = true;
      };

      Install = {
        WantedBy = [ "graphical-session.target" ];
      };
    };
  };
}